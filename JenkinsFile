pipeline {
    agent any
    environment {
        PATH = "C:\\Users\\Nyamatulla\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;${env.PATH}"
        DOCKER_IMAGE = "nyamatulla/flask-blog-app:${BUILD_NUMBER}" 
        REGISTRY_CREDENTIALS = credentials('dockerHub')
        ZAP_PATH = "\"C:\\Program Files\\ZAP\\Zed Attack Proxy\\zap.bat\""
    }

    stages {
        stage('code checkout') {
            steps {
                git changelog: false, poll: false, url: 'https://github.com/Nyamatulla/Flask-Blog_app.git'
            }
        }

        /* stage('SonarQube Analysis') {
            steps {
                script {
                    // Define the SonarScanner tool
                    def scannerHome = tool 'sonar-scanner'

                    // Configure SonarQube environment
                    withSonarQubeEnv('sonar') {
                        // Run SonarScanner
                        bat "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        } */

      /*  stage('Setup') {
            steps {
                bat 'choco install python --ignore-checksums'
                bat 'refreshenv'
                bat 'python -m pip install --upgrade pip'
            }   
        } */

        stage('Install dependencies') {
            steps {
                bat 'pip install -r requirements.txt'
            }
        }
        stage('Static Application Security Testing (SAST)') {
             steps {
                echo 'performing SAST'
                bat 'pip install bandit'
                bat 'bandit -r app'
            }
        }
        stage('Dependency Scanning') {
             steps {
                bat 'pip install safety'
                bat 'safety check'
            }
        }
        stage('Docker build and Push') {
            steps {
               script {
                  bat "docker build -t ${DOCKER_IMAGE} ."
                  /*def dockerImage = docker.image("${DOCKER_IMAGE}")
                  docker.withRegistry('https://index.docker.io/v1/', "dockerHub") {
                      dockerImage.push()
                  } */
               }       
            }  
        }                     
        stage('Docker run') {
            steps {
                bat " docker run -d -p 5000:80 --name flask-blog1 ${DOCKER_IMAGE} "
                sleep 50
            }
        }
       
        // Add the OWASP ZAP scan stage here
        stage('OWASP ZAP Scan') {
            steps {
               script {
            // Start ZAP
                  bat "${ZAP_PATH} -daemon -config api.disablekey=true"

            // Wait for ZAP to start
                  sleep 60

            // Execute ZAP security scan
                  bat "${ZAP_PATH} -cmd -quickurl http://localhost:5000"

            // Stop ZAP
                  bat "${ZAP_PATH} -shutdown"
               }
            }
        }
    }
}
